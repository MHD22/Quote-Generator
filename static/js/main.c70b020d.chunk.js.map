{"version":3,"sources":["components/Quote.js","components/Loading.js","containers/App.js","serviceWorker.js","index.js"],"names":["Quote","onNewQuote","quote","author","onTweet","lng","long","short","length","id","className","onClick","Loading","props","App","setState","loading","fetch","proxi","then","res","json","data","quoteText","quoteAuthor","catch","err","console","log","window","open","state","this","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sUA8CeA,MAzCf,YAAoD,IAApCC,EAAmC,EAAnCA,WAAWC,EAAwB,EAAxBA,MAAQC,EAAgB,EAAhBA,OAAOC,EAAS,EAATA,QAClCC,GAAI,EACJC,EAAK,GACLC,EAAM,GAWV,MAVY,KAATJ,IACCA,EAAO,WAERD,EAAMM,OAAO,IACXF,EAAK,UAGLC,EAAM,SACPF,GAAI,GAGJ,yBAAKI,GAAG,IAAIC,UAAU,qEAElB,yBACIA,UAAWL,EAAIC,EAAKC,GADxB,IACiCL,GAGjC,0BAAMQ,UAAU,SAAUP,GAE1B,yBAAKO,UAAU,wBACX,4BACIC,QAASP,EACTM,UAAU,qEACN,uBAAGA,UAAU,2BAErB,4BACIC,QAASV,EACTS,UAAU,oEACL,gB,MC3BVE,MAPf,SAAiBC,GACb,OACI,yBAAKH,UAAU,YCmDRI,G,uDA3Cb,aAAgB,IAAD,8BACb,gBAOFb,WAAa,WACX,EAAKc,SAAS,CAACC,SAAQ,IACvBC,MAdOC,wHAeNC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKP,SAAS,CAACb,MAAMoB,EAAKC,UAAYpB,OAAOmB,EAAKE,YAAcR,SAAQ,OAEzES,OAAM,SAAAC,GACLC,QAAQC,IAAI,UAAUF,GACtB,EAAKzB,iBAjBM,EAuBfG,QAAQ,WACNyB,OAAOC,KAAP,gDAAqD,EAAKC,MAAM7B,MAAhE,eAA4E,EAAK6B,MAAM5B,OAAvF,qBAAiH,WAtBjH,EAAK4B,MAAM,CACT7B,MAAM,GACNC,OAAO,GACPa,SAAQ,GALG,E,gEAqBbgB,KAAK/B,e,+BAME,IAAD,EAC0B+B,KAAKD,MAA9B7B,EADD,EACCA,MAAMC,EADP,EACOA,OAAQa,EADf,EACeA,QACvB,OACE,yBAAKN,UAAU,wEAETM,EAGJ,kBAAC,EAAD,MAFA,kBAAC,EAAD,CAAOd,MAAOA,EAAOC,OAAQA,EAAQF,WAAY+B,KAAK/B,WAAYG,QAAS4B,KAAK5B,e,GAnCpE6B,IAAMC,YCCJC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.c70b020d.chunk.js","sourcesContent":["import React from 'react';\nimport './Quote.css';\n\n\n\nfunction Quote({onNewQuote,quote , author,onTweet}){\n    let lng=true;\n    let long=\"\";\n    let short=\"\";\n    if(author===''){\n        author=\"Unknown\"\n    }\n    if(quote.length>100){\n         long=\"f3 mb2\"\n    }\n    else{\n         short=\"f2 mb2\"\n        lng=false;\n    }\n    return (\n        <div id=\"q\" className=\"mw7  mh3 mh0-m b--light-gray o-90 ba shadow-5 bg-black-05 br4 pt4\" >\n            {/* quote text  */}\n            <div \n                className={lng?long:short}> {quote}\n            </div> \n            {/* author name */}\n            <span className=\"f5 i \" >{author}</span>\n            {/* buttons container */}\n            <div className=\"flex justify-between\">\n                <button \n                    onClick={onTweet}\n                    className=\"Tilt-inner tw fw5 b--light-gray br3 grow ma3 mb2 ph3 pv1 shadow-3\"  >\n                        <i className=\"fab fa-twitter f3 ph2\"></i>\n                </button>  \n                <button\n                    onClick={onNewQuote}\n                    className=\"Tilt-inner fw7   b--light-gray br3 grow ma3 mb2 pa2 pv1 shadow-3\" >\n                        {\"New Quote\"}\n                </button>\n                \n            </div>\n        </div>\n    );\n}\n\n\nexport default Quote ;","import React from 'react';\nimport './Loading.css';\n\nfunction Loading(props){\n    return (\n        <div className=\"loader\"></div>\n    );\n}\n\n\nexport default Loading ;","import React from 'react';\nimport './App.css';\nimport Quote from '../components/Quote';\nimport Loading from '../components/Loading';\nimport 'tachyons';\n\n//combine the API URL with the cors middlware\nconst proxi =\"https://cors-anywhere.herokuapp.com/\";\nconst newLocal = `http://api.forismatic.com/api/1.0/?method=getQuote&format=json&key=25432&lang=en`;\nconst url =proxi+newLocal;\n\nclass App extends React.Component {\n\n  constructor () {\n    super();\n    this.state={\n      quote:\"\",\n      author:\"\",\n      loading:false\n    };\n  }\n  onNewQuote = () => {\n    this.setState({loading:true})\n    fetch(url)\n    .then(res => res.json())\n    .then(data=>{\n      this.setState({quote:data.quoteText , author:data.quoteAuthor , loading:false})\n    })\n    .catch(err=> {\n      console.log(\"oobs , \",err);\n      this.onNewQuote();});\n  }\n\n  componentDidMount(){\n    this.onNewQuote();\n  }\n  onTweet=()=>{\n    window.open(`https://twitter.com/intent/tweet?text=${this.state.quote} - (${this.state.author})&hashtags=Quote `,\"_blank\");\n  }\n  \n  render(){\n    const {quote,author ,loading} = this.state;\n  return ( \n    <div className=\"App tc flex justify-center content-center items-center  vh-100 w-100\">\n     \n      { ! loading?\n      <Quote quote={quote} author={author} onNewQuote={this.onNewQuote} onTweet={this.onTweet}/>\n          :\n      <Loading/>\n      }\n\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}